pkgs <- c("xts","zoo","quantmod","ggplot2")
new  <- pkgs[!(pkgs %in% installed.packages()[,"Package"])]
if (length(new)) install.packages(new, repos = "https://cloud.r-project.org")
lapply(pkgs, library, character.only = TRUE)
to_simple <- function(x) exp(x) - 1
getSymbols("MSFT", src = "yahoo", from = "2010-01-01", auto.assign = TRUE)
# Close prices
msft_prices <- Cl(MSFT)
colnames(msft_prices) <- "msft"
# Log returns (no setwd, no CSV)
msft_log_returns <- na.omit(diff(log(msft_prices)))
conf_levels <- seq(0.90, 0.99, by = 0.01)
alpha <- 1 - conf_levels
z <- qnorm(alpha)
# Unconditional sigma on log-returns
sigma_uncond <- sd(msft_log_returns$msft)
# VCV (Normal) VaR/ES on log-returns
var_vcv_uncond_log <- -(sigma_uncond * z)
es_vcv_uncond_log  <-  sigma_uncond * dnorm(z) / alpha
# HS on demeaned log-returns
returns_vec <- as.numeric(msft_log_returns$msft)
r_dm <- returns_vec - mean(returns_vec)
qs <- as.numeric(quantile(r_dm, probs = alpha, type = 1, names = FALSE))
var_hs_uncond_log <- -qs
es_hs_uncond_log  <- sapply(qs, function(qa) -mean(r_dm[r_dm <= qa]))
results_uncond <- data.frame(
Confidence = conf_levels,
VaR_VCV = to_simple(var_vcv_uncond_log),
ES_VCV  = to_simple(es_vcv_uncond_log),
VaR_HS  = to_simple(var_hs_uncond_log),
ES_HS   = to_simple(es_hs_uncond_log)
)
get_val <- function(df, conf, col) df[[col]][which.min(abs(df$Confidence - conf))]
VaR95_vcv <- get_val(results_uncond, 0.95, "VaR_VCV")
VaR99_vcv <- get_val(results_uncond, 0.99, "VaR_VCV")
VaR95_hs  <- get_val(results_uncond, 0.95, "VaR_HS")
VaR99_hs  <- get_val(results_uncond, 0.99, "VaR_HS")
msft_simple_returns <- xts(to_simple(msft_log_returns$msft), order.by = index(msft_log_returns))
df_ret <- data.frame(Date = index(msft_simple_returns),
Return = as.numeric(msft_simple_returns$msft))
fig1 <- ggplot(df_ret, aes(x = Date, y = Return)) +
geom_line(linewidth = 0.3, colour = "black") +
geom_hline(yintercept = -VaR95_vcv, colour = "red",  linetype = "dashed") +
geom_hline(yintercept = -VaR99_vcv, colour = "red",  linetype = "solid") +
geom_hline(yintercept = -VaR95_hs,  colour = "blue", linetype = "dashed") +
geom_hline(yintercept = -VaR99_hs,  colour = "blue", linetype = "solid") +
labs(
title = "Figure 1 - MSFT Daily Simple Returns with Unconditional VaR Lines",
subtitle = "Red = VCV (Normal); Blue = HS; solid = 99%, dashed = 95%",
x = NULL, y = "Daily simple return"
) +
theme_minimal()
print(fig1)
target_date <- as.Date("2025-08-22")
lambda <- 0.94
conditional <- msft_log_returns
conditional$var_ewma <- NA_real_
conditional$var_ewma[1] <- 0
Tn <- NROW(conditional)
for (i in 2:Tn) {
conditional$var_ewma[i] <- lambda*conditional$var_ewma[i-1] + (1-lambda)*conditional$msft[i-1]^2
}
conditional$var_ewma[1:100] <- NA
conditional$sigma_ewma <- sqrt(conditional$var_ewma)
conditional <- na.omit(conditional)
if (target_date < first(index(conditional)) || target_date > last(index(conditional))) {
stop("target_date is outside the available sample. Choose a date between ",
as.character(first(index(conditional))), " and ", as.character(last(index(conditional))), ".")
}
idx_T <- max(which(index(conditional) <= target_date))
date_T  <- index(conditional)[idx_T]
sigma_T <- as.numeric(conditional$sigma_ewma[idx_T])
# Conditional VCV (Normal)
z <- qnorm(alpha)
VaR_vcv_cond_log <- -sigma_T * z
ES_vcv_cond_log  <-  sigma_T * dnorm(z) / alpha
# HS on standardised residuals in a rolling window
win <- 500L
if (idx_T <= win) stop("Not enough history for the chosen window size (win).")
window_r   <- as.numeric(conditional$msft[(idx_T - win):(idx_T - 1)])
window_sig <- as.numeric(conditional$sigma_ewma[(idx_T - win):(idx_T - 1)])
window_mu  <- mean(window_r)
std_window <- (window_r - window_mu) / window_sig
VaR_hs_cond_log <- -sapply(alpha, function(a) {
quantile(std_window, probs = a, type = 1, names = FALSE) * sigma_T
})
ES_hs_cond_log <- -sapply(alpha, function(a) {
q_a <- quantile(std_window, probs = a, type = 1, names = FALSE)
mean(std_window[std_window <= q_a]) * sigma_T
})
results_cond <- data.frame(
Date       = rep(date_T, length(conf_levels)),
Confidence = conf_levels,
VaR_VCV    = to_simple(VaR_vcv_cond_log),
ES_VCV     = to_simple(ES_vcv_cond_log),
VaR_HS     = to_simple(VaR_hs_cond_log),
ES_HS      = to_simple(ES_hs_cond_log)
)
print(head(results_uncond))
print(head(results_cond))
